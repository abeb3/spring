2019-01-02
1)
src-main-webapp-WEB-INF에서
spring폴더랑
web.xml파일을 삭제후
   <plugin>
            	<groupId>org.apache.maven.plugins</groupId>
            	<artifactId>maven-war-plugin</artifactId>
            	<version>3.2.0</version>
            	<configuration>
            		<failOnMissingWebXml>false</failOnMissingWebXml>
            	</configuration>
     </plugin>
 pom.xml 파일에 위에 plugin을 추가를 해주고 comfiler의 버전도 java-version에 맞추고, maven update를 진행하면 된다.

 
 
2019-01-03
1)
junit 때문에 매우매우 고생을 했다....
이유는 특별할것이 없이 Test 어노테이션이 보이지 않아서 2시간동안 정말 삽질했다..
스프링을 지웠다 다시 깔고, 다른방법으로 설치도 해보고 했으나 모두 해결이 되지 않았다.

		<dependency>
   			 <groupId>org.springframework</groupId>
    			<artifactId>spring-test</artifactId>
    			<version>5.0.7.RELEASE</version>
    			<scope>test</scope>
		</dependency>
		
방법은 위 의존성을 pom.xml에 작성을 해줘야 정상적으로 처리가 된다.
마침 스프링 버전도 5.0.7.RELEASE버전이라서 호환이 되는거 같다.

그 후에 또 바보처럼 Chef에 자기 자신을 의존주입하는 코드를 잘못 넣고 10분정도 삽질한거 같다...

우선 오전 공부는 이정도인거 같다.

2)
오후 공부
처음은 우선 설치 했던 oracle을 전체 지우고 새롭게 설치를 했다.

정말 spring은 설정이 반이라는 말이 틀리지 않는거 같다.

우선 예전에 설치를 할때는 바탕화면에 localhost로 접속이 가능한 oracle 모양이 있었는데

지금은 보이지 않는다... 하지만 설치는 잘 됬는지 oracle에 관련된 모든 부분과 쿼리, sql developer 역시 작동이 잘된다.

그리고 한가지 깨닫은것은 사용자를 추가 할때 직접 작성해서 처리 하는게 더 정확하다...

JDBC 처리, connection pool 처리 완료

connection pool은 https://github.com/brettwooldridge/HikariCP에서 HikariCP로 처리를 했다.

mybatis를 이용해서 sqlSession 연결 처리도 했다.
